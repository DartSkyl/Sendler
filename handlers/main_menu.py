from loader import dp
from keyboards import main_menu, cancel_button, check_data_keyboard, accounts_choice, ask_deletion
from states import AddingAccount
from utils.account_model import Account, account_dict

from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram import F, html
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from pyrogram.errors.exceptions.bad_request_400 import ApiIdInvalid
from pyrogram.errors.exceptions.not_acceptable_406 import PhoneNumberInvalid


async def send_status_info(msg: Message):
    """–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    –æ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ - —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –±–æ—Ç–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∏ —Å–∫–æ–ª—å–∫–æ –∏–∑ –Ω–∏—Ö –∑–∞–ø—É—â–µ–Ω–æ"""
    count_account = len(account_dict)
    count_active_account = 0
    for account in account_dict.values():
        if account.get_active():
            count_active_account += 1
    await msg.answer(text=f'–í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: <b>{count_account}</b>\n'
                          f'–ê–∫–∫–∞—É–Ω—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ: <b>{count_active_account}</b>', reply_markup=main_menu)


@dp.message(Command('start'))
async def start_func(msg: Message):
    """–ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞"""
    await msg.answer(text=f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {msg.from_user.first_name}!\n'
                          f'–ù—É —á—Ç–æ, –Ω–∞—á–Ω–µ–º? üòâ')
    await send_status_info(msg=msg)


@dp.message(F.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')
async def start_adding_account(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏ –∑–∞–¥–∞–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç—ç–π—Ç"""
    await state.set_state(AddingAccount.name_input)
    await msg.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç:', reply_markup=cancel_button)


@dp.message(AddingAccount.name_input, F.text != 'üö´ –û—Ç–º–µ–Ω–∞')
async def api_id_input(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –º—ã –ª–æ–≤–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ api_id"""
    if '<' not in msg.text:
        await state.set_data({'name': msg.text})
        await state.set_state(AddingAccount.api_id_input)
        await msg.answer(text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>api_id</b>:')
    else:
        await msg.answer(text=html.quote('–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª "<", –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!'))


@dp.message(AddingAccount.api_id_input, F.text.isdigit())
async def api_hash_input(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –º—ã –ª–æ–≤–∏–º api_id –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ api_hash"""
    await state.update_data({'api_id': msg.text})
    await state.set_state(AddingAccount.api_hash_input)
    await msg.answer(text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>api_hash</b>:')


@dp.message(AddingAccount.api_hash_input, F.text != '–û—Ç–º–µ–Ω–∞')
async def phone_number_input(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –º—ã –ª–æ–≤–∏–º api_has –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    await state.update_data({'api_hash': msg.text})
    await state.set_state(AddingAccount.phone_number_input)

    await msg.answer(text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:')


@dp.message(AddingAccount.phone_number_input, F.text.regexp(r'\+\d{10,}'))
async def phone_number_adding(msg: Message, state: FSMContext):
    """–í—ã–Ω–µ—Å–µ–º –ª–æ–≤–ª—é —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞"""
    await state.update_data({'phone_number': msg.text})
    await state.set_state(AddingAccount.check_data)
    await check_the_data(msg=msg, state=state)


async def check_the_data(msg: Message, state: FSMContext):
    """–î–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Ö –∏—Å–ø—Ä–∞–≤–∏—Ç—å"""

    account_data = await state.get_data()
    msg_text = (f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n\n'
                f'<b>–ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞</b>: <i>{account_data["name"]}</i>\n'
                f'<b>api_id</b>: <i>{account_data["api_id"]}</i>\n'
                f'<b>api_hash</b>: <i>{account_data["api_hash"]}</i>\n'
                f'<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>: <i>{account_data["phone_number"]}</i>')
    await msg.answer(text=msg_text, reply_markup=check_data_keyboard)


@dp.callback_query(AddingAccount.check_data, F.data != 'correct')
async def change_the_data(callback: CallbackQuery, state: FSMContext):
    """–ó–¥–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–±–æ –º–µ–Ω—è–µ—Ç –∫–∞–∫–∏–µ-–Ω–∏–±—É–¥—å –¥–∞–Ω–Ω—ã–µ –ª–∏–±–æ –∏–¥–µ—Ç –¥–∞–ª—å—à–µ"""
    await callback.answer()
    change_states = {
        'change_name': (AddingAccount.change_name, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è:'),
        'change_api_id': (AddingAccount.change_api_id, '–í–≤–µ–¥–∏—Ç–µ api_id:'),
        'change_api_hash': (AddingAccount.change_api_hash, '–í–≤–µ–¥–∏—Ç–µ api_hash:'),
        'change_phone_number': (AddingAccount.change_phone_number, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    }
    await state.set_state(change_states[callback.data][0])
    await callback.message.answer(text=change_states[callback.data][1])


@dp.callback_query(AddingAccount.check_data, F.data == 'correct')
async def auth_function(callback: CallbackQuery, state: FSMContext):
    """–ó–¥–µ—Å—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    await callback.answer()
    account_data = await state.get_data()
    new_account = Account(
        name=account_data['name'],
        api_id=account_data['api_id'],
        api_hash=account_data['api_hash'],
        phone_number=account_data['phone_number']
    )

    try:
        await callback.message.answer(text='–°–µ–π—á–∞—Å –≤–∞–º –ø—Ä–∏–¥–µ—Ç –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –¥–æ–±–∞–≤–ª—è–µ—Ç–µ!\n'
                                           '–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ:')
        # –õ–æ–≤–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ö—ç—à –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        code_hash = await new_account.start_session()
        await state.update_data({'code_hash': code_hash, 'new_account': new_account})

        await state.set_state(AddingAccount.code_input)

    except ApiIdInvalid:
        await callback.message.answer(text='–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π <b>api_id –∏–ª–∏ api_hash</b>!\n'
                                           '–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –∏ –≤–≤–µ–¥–∏ –∑–∞–Ω–æ–≤–æ')
        await state.set_state(AddingAccount.check_data)

    except PhoneNumberInvalid:
        await callback.message.answer(text='–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>!\n'
                                           '–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –∏ –≤–≤–µ–¥–∏ –∑–∞–Ω–æ–≤–æ')
        await state.set_state(AddingAccount.check_data)


@dp.message(AddingAccount.code_input, F.text.regexp(r'\d{5}'))
async def auth_code_input(msg: Message, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –∑–¥–µ—Å—å –º—ã –µ–≥–æ –ª–æ–≤–∏–º"""
    account_data = await state.get_data()
    await account_data['new_account'].authorization_and_start(code_hash=account_data['code_hash'], code=str(msg.text))

    account_dict[account_data['name']] = account_data['new_account']

    await msg.answer(text='–ê–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!')
    await send_status_info(msg=msg)
    await state.clear()


@dp.message(AddingAccount.code_input, F.text != 'üö´ –û—Ç–º–µ–Ω–∞')
async def code_error_input(msg: Message):
    """–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∫–æ–¥–∞"""
    await msg.answer(text='–ö–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—è—Ç—å —Ü–∏—Ñ—Ä! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:')


@dp.message(AddingAccount.change_name, F.text != 'üö´ –û—Ç–º–µ–Ω–∞')
async def change_name(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω—è–µ—Ç –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    await state.update_data({'name': msg.text})
    await check_the_data(msg=msg, state=state)
    await state.set_state(AddingAccount.check_data)


@dp.message(AddingAccount.change_api_id, F.text.isdigit())
async def change_api_id(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω—è–µ—Ç api_id"""
    await state.update_data({'api_id': msg.text})
    await check_the_data(msg=msg, state=state)
    await state.set_state(AddingAccount.check_data)


@dp.message(AddingAccount.change_api_id, F.text != 'üö´ –û—Ç–º–µ–Ω–∞')
@dp.message(AddingAccount.api_id_input, F.text != 'üö´ –û—Ç–º–µ–Ω–∞')
async def api_error_input(msg: Message):
    """–ü—Ä–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –≤–≤–æ–¥–µ api_id"""
    await msg.answer(text='<b>api_id</b> —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥')


@dp.message(AddingAccount.change_api_hash, F.text != 'üö´ –û—Ç–º–µ–Ω–∞')
async def change_api_hash(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω—è–µ—Ç api_hash"""
    await state.update_data({'api_hash': msg.text})
    await check_the_data(msg=msg, state=state)
    await state.set_state(AddingAccount.check_data)


@dp.message(AddingAccount.change_phone_number, F.text.regexp(r'\+\d{10,}'))
async def change_phone_number(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω—è–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä"""
    await state.update_data({'phone_number': msg.text})
    await check_the_data(msg=msg, state=state)
    await state.set_state(AddingAccount.check_data)


@dp.message(AddingAccount.change_phone_number, F.text != 'üö´ –û—Ç–º–µ–Ω–∞')
@dp.message(AddingAccount.phone_number_input, F.text != 'üö´ –û—Ç–º–µ–Ω–∞')
async def phone_nuber_error_input(msg: Message):
    """–ü—Ä–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –≤–≤–æ–¥–µ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞"""
    await msg.answer(text='<b>–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä</b> –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!\n'
                          '–ü—Ä–∏–º–µ—Ä +79221110500\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!')


@dp.message(F.text == '‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')
async def start_remove_account(msg: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    await msg.answer(text='–í—ã–±–µ—Ä–µ—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', reply_markup=accounts_choice(account_dict))
    await state.set_state(AddingAccount.deletion_account)


@dp.callback_query(AddingAccount.deletion_account, F.data.startswith('ac_'))
async def ask_about_account_deletion(callback: CallbackQuery, state: FSMContext):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ"""
    removing_acc: Account = account_dict[callback.data.replace('ac_', '')]
    await state.set_data({'account': removing_acc})
    await callback.message.answer(text='–í—ã —É–≤–µ—Ä–µ–Ω—ã?', reply_markup=ask_deletion)


@dp.message(AddingAccount.deletion_account, F.text == '–î–∞')
async def remove_account(msg: Message, state: FSMContext):
    """–£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"""
    removing_acc: Account = (await state.get_data())['account']
    await removing_acc.log_out_account()
    await msg.answer('–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω!')
    await state.clear()
    await send_status_info(msg)


@dp.message(AddingAccount.deletion_account, F.text == '–ù–µ—Ç')
async def not_remove_account(msg: Message, state: FSMContext):
    """–ù–µ —É–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"""
    await state.clear()
    await send_status_info(msg)


@dp.message(F.text == 'üö´ –û—Ç–º–µ–Ω–∞')
async def cancel_function(msg: Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã"""
    await state.clear()
    await send_status_info(msg)


@dp.message(Command('get_log'))
async def get_bot_log(msg: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –≤—ã–≥—Ä—É–∂–∞–µ—Ç –≤ —á–∞—Ç —Ñ–∞–π–ª —Å –ª–æ–≥–æ–º –±–æ—Ç–∞"""
    log_file = FSInputFile('bot.log')
    await msg.answer_document(document=log_file)
