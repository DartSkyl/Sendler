import re
import asyncio

from aiogram.utils.media_group import MediaGroupBuilder

from loader import dp
from keyboards import (back_button, cancel_button_2, file_adding, text_adding,
                       accounts_choice, menu_for_account, mailing_sett, action_with_messages,
                       messages_for_preview, remove_message, messages_for_removing, ask_deletion)
from utils.account_model import Account, account_dict
from .main_menu import send_status_info
from states import AccountSettings

from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram import F, html
from aiogram.fsm.context import FSMContext
from pyrogram.errors.exceptions.bad_request_400 import (UsernameInvalid, UserAlreadyParticipant,
                                                        InviteHashExpired, UsernameNotOccupied)
from pyrogram.errors.exceptions.flood_420 import FloodWait


async def preview_account(msg: Message, account: Account):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫–∫–∞—É–Ω—Ç–∞"""
    await msg.delete()
    await msg.answer(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —é–∑–µ—Ä –±–æ—Ç–∞', reply_markup=back_button)
    await msg.answer(text=account.get_account_info(), reply_markup=menu_for_account)


@dp.message(F.text == 'üìã –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã')
async def get_accounts_list(msg: Message):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    await msg.answer(text='–í—ã–±–µ—Ä–µ—Ç–µ –∞–∫–∫–∞—É–Ω—Ç:', reply_markup=accounts_choice(account_dict))


@dp.callback_query(F.data.startswith('ac_'))
async def open_account_settings(callback: CallbackQuery, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    preview_acc: Account = account_dict[callback.data.replace('ac_', '')]
    await state.set_data({'account': preview_acc})
    await state.set_state(AccountSettings.view_account)
    await preview_account(callback.message, preview_acc)


@dp.callback_query(AccountSettings.view_account, F.data == 'switch')
async def switch_account_activity(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    preview_acc: Account = (await state.get_data())['account']

    try:
        await preview_acc.change_activity()
        await preview_account(callback.message, preview_acc)
    except ValueError:
        await callback.message.answer('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!')
        await callback.answer()
    except IndexError:
        await callback.message.answer('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!')
        await callback.answer()
    except ZeroDivisionError:
        await callback.message.answer('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!')
        await callback.answer()


@dp.callback_query(AccountSettings.view_account, F.data == 'put_chats_list')
async def start_put_chats_list(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ —é–∑–µ—Ä –±–æ—Ç–∞"""
    preview_acc: Account = (await state.get_data())['account']

    if preview_acc.get_active():
        await callback.answer()
        await callback.message.answer('<b>–°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É‚ùó</b>')
    else:
        await state.set_state(AccountSettings.put_chats)
        await callback.message.delete()
        await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≥—Ä—É–ø–ø—ã:', reply_markup=back_button)


@dp.message(AccountSettings.put_chats, F.text != '‚óÄÔ∏è –ù–∞–∑–∞–¥')
async def put_chats(msg: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è —é–∑–µ—Ä –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—ã. –ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –±–ª–æ–∫–æ–≤ try except
    –ü–æ –Ω–µ–≤–µ–¥–æ–º—ã–º –ø—Ä–∏—á–∏–Ω–∞–º, –≤—Å—Ç—É–ø–∞—Ç—å –≤ –æ—Ç–∫—Ä—ã—Ç—ã–µ —á–∞—Ç—ã –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —é–∑–µ—Ä–Ω—ç–π–º –≥—Ä—É–ø–ø—ã. –û—Ç—Å—é–¥–∞ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è
    –≤–µ—Ç–∫–∞ try except. –ò–∑ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ñ–ª—É–¥–∞ –≤—Å—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø—Ä–∏—à–ª–æ—Å—å –æ–±–µ—Ä–Ω—É—Ç—å –≤ —Ü–∏–∫–ª while. –¢–∞–∫ –∫–∞–∫ –≤ –∏–Ω–æ–º —Å–ª—É—á–∞–µ,
    –ø—Ä–∏—à–ª–æ—Å—å —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –≤–µ—Ç–∫–∏ try except –¥–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏. –ü–æ –∫—Ä–∞–π–Ω–µ–π –º–µ—Ä–µ, —è —Ç–∞–∫ –≤–∏–∂—É. –£ –≤–∞—Å –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å—Å—è –ª—É—á—à–µ"""
    preview_acc: Account = (await state.get_data())['account']

    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞—á–∏—â–∞–µ–º —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —á–∞—Ç—ã
    preview_acc.chats_dict_clean()

    chats_links = msg.text.split('\n')
    await msg.answer('<b>–ù–∞—á–∞—Ç–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤!</b>')

    # –ö–æ–≥–¥–∞ –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç —Ñ–ª—É–¥, —Ç–æ –ø–æ —Å—É—Ç–∏ –ø—Ä–∏–¥–µ—Ç—Å—è –≤—Å–µ –¥–µ–ª–∞—Ç—å –∑–∞–Ω–æ–≤–æ.
    # –ß—Ç–æ –±—ã —ç—Ç–æ–≥–æ –∏–∑–±–µ–∂–∞—Ç—å —Ç–æ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É–¥–∞–ª—è–µ–º
    # –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã —É–∂–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ. –ò –∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç —Ñ–ª—É–¥,
    # –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è —Å—Å—ã–ª–∫–∞–º–∏.

    while len(chats_links) > 0:
        for link in chats_links:
            try:
                await preview_acc.join_to_chat(chat=link)
                await msg.answer(f'–ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n{link}')
                chats_links.remove(link)
            except UsernameInvalid:
                try:
                    await preview_acc.join_to_chat(chat=link.replace('https://t.me/', ''))
                    await msg.answer(f'–ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n{link}')
                    chats_links.remove(link)
                except UsernameInvalid:
                    await msg.answer(f'–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞!\n{link}')
                    chats_links.remove(link)
                except UsernameNotOccupied:
                    await msg.answer(f'–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞!\n{link}')
                    chats_links.remove(link)
                except UserAlreadyParticipant:
                    await msg.answer(f'–Æ–∑–µ—Ä –±–æ—Ç —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ!\n{link}')
                    await preview_acc.add_chat_info(chat=link.replace('https://t.me/', ''))
                    chats_links.remove(link)
                except InviteHashExpired:
                    await msg.answer(f'–Æ–∑–µ—Ä –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ –∏–ª–∏ '
                                     f'—Å—Å—ã–ª–∫–∞ —É–∂–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞!\n{link}')
                    chats_links.remove(link)
                except FloodWait as exc:
                    await msg.answer(f'‚ùó–¢–µ–ª–µ–≥—Ä–∞–º —Ä—É–≥–∞–µ—Ç—Å—è –Ω–∞ —Ñ–ª—É–¥‚ùó\n'
                                     f'–ü–µ—Ä–µ—Ä—ã–≤ {exc.value} —Å–µ–∫—É–Ω–¥')
                    await asyncio.sleep(5)  # –ü–æ–¥–æ–∂–¥–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ. –ü—Ä–∏–±–∞–≤–∏—Ç—å –Ω–µ —Ä–µ—à–∏–ª—Å—è, —Ç–∞–∫ –∫–∞–∫ —Ñ–∏–≥ –µ–≥–æ –∑–Ω–∞–µ—Ç
                    await asyncio.sleep(exc.value)
                except KeyError:
                    await msg.answer(f'–Æ–∑–µ—Ä –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ –∏–ª–∏ '
                                     f'—Å—Å—ã–ª–∫–∞ —É–∂–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞!\n{link}')
                    chats_links.remove(link)
            except UserAlreadyParticipant:
                await msg.answer(f'–Æ–∑–µ—Ä –±–æ—Ç —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ!\n{link}')
                await preview_acc.add_chat_info(chat=link)
                chats_links.remove(link)
            except InviteHashExpired:
                await msg.answer(f'–Æ–∑–µ—Ä –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ –∏–ª–∏ '
                                 f'—Å—Å—ã–ª–∫–∞ —É–∂–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞!\n{link}')
                chats_links.remove(link)
            except UsernameNotOccupied:
                await msg.answer(f'–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞!\n{link}')
                chats_links.remove(link)
            except FloodWait as exc:
                await msg.answer(f'‚ùó–¢–µ–ª–µ–≥—Ä–∞–º —Ä—É–≥–∞–µ—Ç—Å—è –Ω–∞ —Ñ–ª—É–¥‚ùó\n'
                                 f'–ü–µ—Ä–µ—Ä—ã–≤ {exc.value} —Å–µ–∫—É–Ω–¥')
                await asyncio.sleep(5)  # –ü–æ–¥–æ–∂–¥–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ. –ü—Ä–∏–±–∞–≤–∏—Ç—å –Ω–µ —Ä–µ—à–∏–ª—Å—è, —Ç–∞–∫ –∫–∞–∫ —Ñ–∏–≥ –µ–≥–æ –∑–Ω–∞–µ—Ç
                await asyncio.sleep(exc.value)
    await msg.answer('<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>')
    await preview_account(msg, preview_acc)
    await state.set_state(AccountSettings.view_account)


@dp.callback_query(AccountSettings.view_account, F.data == 'mailing_settings')
async def settings_for_mailing_menu(
        callback: CallbackQuery | None = None,
        state: FSMContext | None = None,
        msg: Message | None = None
):
    """–ó–¥–µ—Å—å –º—ã –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    preview_acc: Account = (await state.get_data())['account']
    chats = preview_acc.get_chats_dict()
    settings_dict = preview_acc.get_settings_dict()

    # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —é–∑–µ—Ä –±–æ—Ç —Ö–æ—Ç—å –≤ –æ–¥–Ω–æ–º —á–∞—Ç–µ
    msg_text = '–ß–∞—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç –±–æ—Ç:\n\n' if len(chats) > 0 \
        else '–î–∞–Ω–Ω—ã–π —é–∑–µ—Ä –±–æ—Ç –ø–æ–∫–∞ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–º —á–∞—Ç–µ!\n'

    # –ï—Å–ª–∏ –ø—É—Å—Ç–æ, —Ç–æ —Å–∞–º–∏ –ø–æ–Ω–∏–º–∞–µ—Ç–µ...
    for link in chats.keys():
        msg_text += link + '\n'

    msg_text += '\n<b>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</b> ' + (f'{settings_dict["interval"]} –º–∏–Ω' if settings_dict["interval"]
                                         else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

    msg_text += '\n\n<b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n'

    if len(settings_dict['messages']) > 0:
        for mes in settings_dict['messages']:
            msg_text += mes + '\n'
    else:
        msg_text += '<i>-–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç-</i>'
    if callback:
        await callback.message.delete()
        await callback.message.answer(text=msg_text, reply_markup=mailing_sett)
        await state.set_state(AccountSettings.mailing_settings)
    else:
        await msg.answer(text=msg_text, reply_markup=mailing_sett)
        await state.set_state(AccountSettings.mailing_settings)


@dp.callback_query(AccountSettings.mailing_settings, F.data == 'interval')
async def setup_interval(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.message.delete()
    await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö:', reply_markup=cancel_button_2)
    await state.set_state(AccountSettings.setup_interval)


@dp.message(AccountSettings.setup_interval, F.text.regexp(r'\d{1,}'))
async def catch_interval(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö"""
    preview_acc: Account = (await state.get_data())['account']
    preview_acc.set_interval(int(msg.text))
    await msg.answer(text=f'<b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª {msg.text} –º–∏–Ω</b>', reply_markup=back_button)

    # –ò –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫

    await settings_for_mailing_menu(state=state, msg=msg)


@dp.callback_query(AccountSettings.mailing_settings, F.data == 'add_mess')
async def setup_messages_for_mailing(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ –æ–±—â–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    bot_mess_dict = (await state.get_data())['account'].get_messages_dict()
    await callback.message.delete()
    await callback.message.answer('–í—ã–±–µ—Ä–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞:', reply_markup=messages_for_preview(bot_mess_dict))
    await state.set_state(AccountSettings.setup_message)


@dp.callback_query(AccountSettings.setup_message, F.data.startswith('mess_'))
async def catch_message(callback: CallbackQuery, state: FSMContext):
    """–õ–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–∞—Å—Å—ã–ª–∫—É"""
    preview_acc: Account = (await state.get_data())['account']

    # –í—ã–Ω–∏–º–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä—è–º–æ –∏–∑ callback
    preview_acc.setup_mess_in_settings_dict(callback.data.replace('mess_', ''))

    # –ò –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏

    await settings_for_mailing_menu(state=state, callback=callback)


@dp.callback_query(AccountSettings.mailing_settings, F.data == 'del_mess')
async def remove_message_from_setting(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–¥–∞–ª–µ–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""

    # –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ
    bot_mess_set = (await state.get_data())['account'].get_messages_from_settings()
    await callback.message.delete()
    await callback.message.answer(text='–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—å:',
                                  reply_markup=messages_for_removing(bot_mess_set))
    await state.set_state(AccountSettings.delete_msg_from_settings)


@dp.callback_query(AccountSettings.delete_msg_from_settings, F.data.startswith('rem_'))
async def catch_removing_messages(callback: CallbackQuery, state: FSMContext):
    """–õ–æ–≤–∏–º —É–¥–∞–ª—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    preview_acc: Account = (await state.get_data())['account']

    # –í—ã–Ω–∏–º–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä—è–º–æ –∏–∑ callback

    preview_acc.remove_message_from_settings(callback.data.replace('rem_', ''))

    # –ò –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏

    await settings_for_mailing_menu(state=state, callback=callback)


@dp.callback_query(AccountSettings.view_account, F.data == 'msg_for_mailing')
async def messages_for_mailing_menu(callback: CallbackQuery, state: FSMContext):
    """–î–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await callback.message.edit_reply_markup(reply_markup=action_with_messages)
    await state.set_state(AccountSettings.choice_msg_action)


@dp.callback_query(AccountSettings.choice_msg_action, F.data == 'add_msg')
async def start_adding_message_for_mailing(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.message.delete()
    await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> —Å–æ–æ–±—â–µ–Ω–∏—è:', reply_markup=cancel_button_2)
    await state.set_state(AccountSettings.msg_title)


@dp.message(AccountSettings.msg_title, F.text != 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å')
async def set_message_title(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –≤–≤–æ–¥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    await state.update_data({'msg_title': msg.text})
    msg_text = (f'–°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç—Ä–µ—Ö –≤–∏–¥–æ–≤:\n'
                f'- —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç (3000 —Å–∏–º–≤–æ–ª–æ–≤)\n'
                f'- —Ç–µ–∫—Å—Ç (1024 —Å–∏–º–≤–æ–ª–∞, –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç) '
                f'+ —Ñ–∞–π–ª(—ã)(–¥–æ 10 —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã)\n'
                f'- —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª(—ã)(–¥–æ 10 —Ñ–∞–π–ª–æ–≤)\n\n'
                f'‚ÄºÔ∏è<b>–°–∫–∏–¥—ã–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∞ –≤–∞—à–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –≤ –≤–∏–¥–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –ø—É—Ç–µ–π.'
                f'–¢–∞–∫ –∂–µ, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —É–∫–∞–∑–∞—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞ - photo, video, document, audio.</b>‚ÄºÔ∏è\n\n'
                f'–ú–æ–∂–Ω–æ —Å–∫–∏–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫, –≥–¥–µ –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª —É–∫–∞–∑–∞–Ω —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏!\n'
                f'–°–∫–∏–Ω—å—Ç–µ —Ñ–∞–π–ª(—ã) –∏/–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–î–∞–ª—å—à–µ</b>')
    await msg.answer(text=msg_text, reply_markup=file_adding)
    await state.update_data({'mediafile': []})
    await state.set_state(AccountSettings.msg_files)


@dp.message(AccountSettings.msg_files, F.text != '–î–∞–ª—å—à–µ ‚ñ∂Ô∏è', F.text != 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å')
async def adding_files(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã"""
    # –¢–∞–∫ –∫–∞–∫, –ø—Ä–∏ —Å–∫–∏–¥—ã–≤–∞–Ω–∏–∏ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö
    # —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –ø—Ä–∏—á—É–¥–ª–∏–≤—É—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å –∑–∞—Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
    file_list = (await state.get_data())['mediafile']

    files = msg.text.split('\n')
    for file in files:
        file = file.replace('"', '').split()
        # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –≤ –ø—É—Ç–∏ –±—É–¥–µ—Ç –ª–∏—à–Ω–∏–π –ø—Ä–æ–±–µ–ª
        file = [' '.join(file[0:-1]), file[-1]]
        if file[1] in {'photo', 'video', 'document', 'audio'}:
            file_list.append(file)

            await msg.answer('–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω. –°–∫–∏–Ω—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–∞–ª—å—à–µ')
        else:
            await msg.answer('–¢–∏–ø —Ñ–∞–π–ª–∞ —É–∫–∞–∑–∞–Ω –Ω–µ –≤–µ—Ä–Ω–æ!')
    else:
        await state.update_data({'mediafile': file_list})


@dp.message(AccountSettings.msg_files, F.text == '–î–∞–ª—å—à–µ ‚ñ∂Ô∏è')
async def check_files(msg: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫–∏–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ï—Å–ª–∏ –≤—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç"""
    file_id_list = (await state.get_data())['mediafile']

    # –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ —á–µ–º –Ω–∞–¥–æ, —Ç–æ –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
    if 0 < len(file_id_list) <= 10:
        type_set = {t[1] for t in file_id_list}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ–¥–Ω–æ—Ç–∏–ø–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤. –í–ø–µ—Ä–µ–º–µ—à–∫—É –º–æ–≥—É—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ(–Ω–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ)
        if len(type_set) == 1:  # –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —É –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –æ–¥–∏–Ω —Ç–∏–ø
            await msg.answer(text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø—É –ì–æ—Ç–æ–≤–æ:', reply_markup=text_adding)
            await state.set_state(AccountSettings.msg_text)
            await state.update_data({'only_text': False})
        elif len(type_set) == 2 and ('photo' and 'video' in type_set):
            await msg.answer(text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø—É –ì–æ—Ç–æ–≤–æ:', reply_markup=text_adding)
            await state.set_state(AccountSettings.msg_text)
            await state.update_data({'only_text': False})
        else:
            await msg.answer(text='–§–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–Ω–æ—Ç–∏–ø–Ω—ã–º–∏! –°–æ–≤–º–µ—Å—Ç–Ω–æ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ!',
                             reply_markup=file_adding)
            await state.update_data({'mediafile': []})

    elif len(file_id_list) == 0:  # –ó–Ω–∞—á–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await state.set_state(AccountSettings.msg_text)
        await msg.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç', reply_markup=cancel_button_2)
        await state.update_data({'only_text': True})

    else:
        await msg.answer(text='–§–∞–ª–æ–≤ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', reply_markup=file_adding)
        await state.update_data({'mediafile': []})


@dp.message(AccountSettings.msg_text, F.text != 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å')
async def message_text_input(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏/–∏–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –≤–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if '<' in msg.text:
        await msg.answer(text=html.quote('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ "<" –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ–ª—å–∑—è, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–∞—Ä—É—à–∏—Ç —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞!'))
    else:

        message_info = await state.get_data()
        enti = msg.entities  # –î–ª—è —Å—Å—ã–ª–æ–∫ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞
        text_for_post = msg.text
        try:
            for elem in enti:
                if elem.type == 'text_link':
                    reg = r'[^#]{0}'.format(elem.extract_from(msg.text))
                    sub_str = f'<a href = "{elem.url}">{elem.extract_from(msg.text)}</a>'
                    text_for_post = re.sub(reg, sub_str, text_for_post)
        except TypeError:
            pass

        if message_info['only_text']:
            if len(msg.text) <= 3000:
                message_info['account'].set_message_for_mailing(message={
                    message_info['msg_title']: text_for_post
                })
                await msg.answer(text='–î–æ–±–∞–≤–ª–µ–Ω–æ')
                preview_acc: Account = message_info['account']
                await preview_account(msg, preview_acc)
                await state.set_state(AccountSettings.view_account)
                # await state.clear()
            else:
                await state.set_state(AccountSettings.false_state)
                # –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –∫–æ–≥–¥–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º —Ä–∞–∑–æ–±—å–µ—Ç
                # —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—Ç–æ—Ä–æ–µ

                await msg.answer(text=f'–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è 3000 —Å–∏–º–≤–æ–ª–æ–≤ '
                                      f'(–í—ã –≤–≤–µ–ª–∏ {len(msg.text)} —Å–∏–º–≤–æ–ª–∞)',
                                 reply_markup=text_adding)

                await asyncio.sleep(1)
                await state.set_state(AccountSettings.msg_text)  # –ò —Å—Ä–∞–∑—É —É—Å—Ç–∞–Ω–æ–≤–∏–º —Å—Ç—ç–π—Ç –æ–±—Ä–∞—Ç–Ω–æ,
                # —á—Ç–æ –±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        else:
            if len(msg.text) <= 1024:
                message_info['account'].set_message_for_mailing(message={
                    message_info['msg_title']: (
                        text_for_post if msg.text != '–ì–æ—Ç–æ–≤–æ' else None, message_info['mediafile'])
                })
                await msg.answer(text='–î–æ–±–∞–≤–ª–µ–Ω–æ')
                preview_acc: Account = message_info['account']
                await preview_account(msg, preview_acc)
                await state.set_state(AccountSettings.view_account)

            else:
                await msg.answer(text=f'–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–∞–π–ª–∞(–æ–≤) 1024 —Å–∏–º–≤–æ–ª–∞ '
                                      f'(–í—ã –≤–≤–µ–ª–∏ {len(msg.text)} —Å–∏–º–≤–æ–ª–∞)',
                                 reply_markup=text_adding)


@dp.callback_query(AccountSettings.choice_msg_action, F.data == 'preview_msg')
async def start_preview_messages_and_remove(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.message.delete()
    bot_mess_dict = (await state.get_data())['account'].get_messages_dict()
    await callback.message.answer(text='–í—ã–±–µ—Ä–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:',
                                  reply_markup=messages_for_preview(bot_mess_dict))
    await state.set_state(AccountSettings.preview_mess)


@dp.callback_query(AccountSettings.preview_mess, F.data.startswith('mess_'))
async def preview_message_and_remove(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–∏—Ç—å"""

    # –£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤—ã–∑—ã–≤–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, –∞ –∫–ª—é—á –¥–ª—è –Ω–µ–≥–æ –¥–æ—Å—Ç–∞–µ–º –∏–∑ callback
    message_self = (await state.get_data())['account'].get_messages_dict()[callback.data.replace('mess_', '')]

    # –°–æ—Ö—Ä–∞–Ω–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    await state.update_data({'title_for_del': callback.data.replace('mess_', '')})
    await callback.message.delete()
    await callback.message.answer(text='–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä',
                                  reply_markup=remove_message
                                  )
    await state.set_state(AccountSettings.msg_preview)

    if isinstance(message_self, str):  # –∑–Ω–∞—á–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±–µ–∑ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤

        await callback.message.answer(text=message_self)

    else:

        media_group = MediaGroupBuilder(caption=message_self[0])
        for mediafile in message_self[1]:
            media_group.add(type=mediafile[1], media=FSInputFile(mediafile[0]))

        await callback.message.answer_media_group(media=media_group.build())


@dp.message(AccountSettings.msg_preview, F.text == '–£–¥–∞–ª–∏—Ç—å')
async def ask_about_deletion(msg: Message, state: FSMContext):
    """–ü—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ"""
    await msg.answer(text='–í—ã —É–≤–µ—Ä–µ–Ω—ã?', reply_markup=ask_deletion)
    await state.set_state(AccountSettings.remove_mess)


@dp.message(AccountSettings.remove_mess, F.text == '–î–∞')
async def remove_message_func(msg: Message, state: FSMContext):
    """–£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å–æ –≤—Å–µ–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    all_data = await state.get_data()  # –¢–∞–∫ –ø—Ä–æ—Å—Ç–æ —É–¥–æ–±–Ω–µ–π
    pre_account: Account = all_data['account']
    del_message = all_data['title_for_del']
    pre_account.remove_message_from_dict(del_message)

    # –ò –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π

    bot_mess_dict = pre_account.get_messages_dict()
    await msg.answer('<b>–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!</b>')
    await msg.answer(text='–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π', reply_markup=back_button)
    await msg.answer(text='–í—ã–±–µ—Ä–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:',
                     reply_markup=messages_for_preview(bot_mess_dict))
    await state.set_state(AccountSettings.preview_mess)


@dp.message(AccountSettings.remove_mess, F.text == '–ù–µ—Ç')
async def else_not_delete(msg: Message, state: FSMContext):
    """–ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    bot_mess_dict = (await state.get_data())['account'].get_messages_dict()
    await msg.answer(text='–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π', reply_markup=back_button)
    await msg.answer(text='–í—ã–±–µ—Ä–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:',
                     reply_markup=messages_for_preview(bot_mess_dict))
    await state.set_state(AccountSettings.preview_mess)


@dp.message(AccountSettings.msg_preview, F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥')
async def return_to_mess_list(msg: Message, state: FSMContext):
    """–ò–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π"""
    bot_mess_dict = (await state.get_data())['account'].get_messages_dict()
    await msg.answer(text='–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π', reply_markup=back_button)
    await msg.answer(text='–í—ã–±–µ—Ä–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:',
                     reply_markup=messages_for_preview(bot_mess_dict))
    await state.set_state(AccountSettings.preview_mess)


@dp.message(AccountSettings.setup_interval, F.text == 'üö´ –û—Ç–º–µ–Ω–∏—Ç—å')
@dp.message(AccountSettings.setup_message, F.text.in_({'üö´ –û—Ç–º–µ–Ω–∏—Ç—å', '‚óÄÔ∏è –ù–∞–∑–∞–¥'}))
@dp.message(AccountSettings.delete_msg_from_settings, F.text.in_({'üö´ –û—Ç–º–µ–Ω–∏—Ç—å', '‚óÄÔ∏è –ù–∞–∑–∞–¥'}))
async def back_to_settings_menu(msg: Message, state: FSMContext):
    """–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await settings_for_mailing_menu(msg=msg, state=state)


@dp.message(AccountSettings.preview_mess, F.text.in_({'üö´ –û—Ç–º–µ–Ω–∏—Ç—å', '‚óÄÔ∏è –ù–∞–∑–∞–¥'}))
@dp.message(AccountSettings.choice_msg_action, F.text.in_({'üö´ –û—Ç–º–µ–Ω–∏—Ç—å', '‚óÄÔ∏è –ù–∞–∑–∞–¥'}))
@dp.message(AccountSettings.msg_files, F.text.in_({'üö´ –û—Ç–º–µ–Ω–∏—Ç—å', '‚óÄÔ∏è –ù–∞–∑–∞–¥'}))
@dp.message(AccountSettings.msg_text, F.text.in_({'üö´ –û—Ç–º–µ–Ω–∏—Ç—å', '‚óÄÔ∏è –ù–∞–∑–∞–¥'}))
@dp.message(AccountSettings.msg_title, F.text.in_({'üö´ –û—Ç–º–µ–Ω–∏—Ç—å', '‚óÄÔ∏è –ù–∞–∑–∞–¥'}))
@dp.message(AccountSettings.mailing_settings, F.text.in_({'üö´ –û—Ç–º–µ–Ω–∏—Ç—å', '‚óÄÔ∏è –ù–∞–∑–∞–¥'}))
@dp.message(AccountSettings.put_chats, F.text.in_({'üö´ –û—Ç–º–µ–Ω–∏—Ç—å', '‚óÄÔ∏è –ù–∞–∑–∞–¥'}))
async def back_to_account_preview(msg: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —é–∑–µ—Ä –±–æ—Ç–∞"""
    preview_acc: Account = (await state.get_data())['account']
    await preview_account(msg, preview_acc)
    await state.set_state(AccountSettings.view_account)


@dp.message(AccountSettings.view_account, F.text.in_({'üö´ –û—Ç–º–µ–Ω–∏—Ç—å', '‚óÄÔ∏è –ù–∞–∑–∞–¥'}))
async def back_to_account_list(msg: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await get_accounts_list(msg)


@dp.message(F.text.in_({'üö´ –û—Ç–º–µ–Ω–∏—Ç—å', '‚óÄÔ∏è –ù–∞–∑–∞–¥'}))
async def back_to_main_menu(msg: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await send_status_info(msg)
